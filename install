#!/bin/bash -i
NODEDIR="$(cd "$(dirname "${BASH_SOURCE[0]}")" && pwd)"
. $NODEDIR/utils/docker

basics-install() {
    apt update
    apt -y install ca-certificates curl grep git whiptail
}

docker-install() {
    if ! grep -q "docker" <<< $(find /etc/apt/ -name *.list | xargs cat | grep  ^[[:space:]]*deb | grep -v deb-src); then
        echo "Installing Docker..."
        install -m 0755 -d /etc/apt/keyrings
        curl -fsSL https://download.docker.com/linux/ubuntu/gpg -o /etc/apt/keyrings/docker.asc
        chmod a+r /etc/apt/keyrings/docker.asc
        echo \
            "deb [arch=$(dpkg --print-architecture) signed-by=/etc/apt/keyrings/docker.asc] https://download.docker.com/linux/ubuntu \
            $(. /etc/os-release && echo "$VERSION_CODENAME") stable" | \
            sudo tee /etc/apt/sources.list.d/docker.list > /dev/null
            apt update && apt install docker-ce docker-ce-cli containerd.io docker-buildx-plugin docker-compose-plugin docker-compose
        apt -y install docker-ce docker-ce-cli containerd.io docker-buildx-plugin docker-compose-plugin docker-compose
    fi
}

nodejs-install() {
    if [ ! -d "$HOME/.nvm" ]; then
        echo "Adding NVM"
        apt -y install curl grep
        curl -o- https://raw.githubusercontent.com/nvm-sh/nvm/v0.40.0/install.sh | bash
        source $HOME/.bashrc
        nvm install --lts
        nvm use --lts
    fi

    if [ `npm list -g | grep -c pino-pretty` -eq 0 ]; then
        echo "Adding Pino Pretty"
        npm install -g pino-pretty
    fi
}

reverseproxy-check() {
    if [ "$( docker container inspect -f '{{.State.Running}}' nginx-proxy )" = "false" ] || [ "$( docker container inspect -f '{{.State.Running}}' nginx-ssl )" = "false" ]; then
        return 1
    fi
}

node-start() { # 1. chain id 2. node name 3. env path
    [ -z "$1" ] && { echo "Error: provide chain id"; return 1; }
    [ -f "$NODEDIR/$1/$1.yml" ] || { echo "Error: $1.yml file not found."; return 1; }
    PROJECT_NAME="${2:-$1}"
    export PROJECT_NAME
    ENV_FILE="${3:-$NODEDIR/$1/${PROJECT_NAME}}"
    [ -f "$ENV_FILE.env" ] || { echo "Error: $ENV_FILE.env file not found"; return 1; }
    source $ENV_FILE.env

    case $1 in
        "mainnet")
            [ -z $CONFIG_PATH ] && ! volume-exists ${PROJECT_NAME}_config && docker volume create ${PROJECT_NAME}_config
            cp $NODEDIR/mainnet/config.yaml ${CONFIG_PATH:-/var/lib/docker/volumes/${PROJECT_NAME}_config/_data}/config.yaml

            [ -z $DATABASE_PATH ] && ! volume-exists ${PROJECT_NAME}_data && docker volume create ${PROJECT_NAME}_data
            ;;
        "gnosis")
            [ -z $CONFIG_PATH ] && ! volume-exists ${PROJECT_NAME}_config && docker volume create ${PROJECT_NAME}_config
            cp $NODEDIR/gnosis/config.yaml ${CONFIG_PATH:-/var/lib/docker/volumes/${PROJECT_NAME}_config/_data}/config.yaml

            [ -z $DATABASE_PATH ] && ! volume-exists ${PROJECT_NAME}_data && docker volume create ${PROJECT_NAME}_data
            ;;
        "matic")
            [ -z $CONFIG_PATH ] && ! volume-exists ${PROJECT_NAME}_config && docker volume create ${PROJECT_NAME}_config
            cp $NODEDIR/matic/config.yaml ${CONFIG_PATH:-/var/lib/docker/volumes/${PROJECT_NAME}_config/_data}/config.yaml

            [ -z $DATABASE_PATH ] && ! volume-exists ${PROJECT_NAME}_data && docker volume create ${PROJECT_NAME}_data

            [ -z $HEIMDALL_PATH ] && ! volume-exists ${PROJECT_NAME}_heimdall && docker volume create ${PROJECT_NAME}_heimdall
            cp $NODEDIR/matic/heimdall-entrypoint.sh ${HEIMDALL_PATH:-/var/lib/docker/volumes/${PROJECT_NAME}_heimdall/_data}/heimdall-entrypoint.sh
            ;;
        "arbitrum-one")
            [ -z $CLASSIC_DATABASE_PATH ] && ! volume-exists ${PROJECT_NAME}_classic-data && docker volume create ${PROJECT_NAME}_classic-data
            # curl https://snapshot.arbitrum.foundation/arb1/classic-archive.tar | tar -xv -C  ${CLASSIC_DATABASE_PATH:-"/var/lib/docker/volumes/${PROJECT_NAME}_classic-data/_data/"}

            [ -z $NITRO_DATABASE_PATH ] && ! volume-exists ${PROJECT_NAME}_nitro-data && docker volume create ${PROJECT_NAME}_nitro-data
            ;;
        "avalanche")
            [ -z $CONFIG_PATH ] && ! volume-exists ${PROJECT_NAME}_config && docker volume create ${PROJECT_NAME}_config
            cp $NODE_DIR/avalanche/node.json ${CONFIG_PATH:-/var/lib/docker/volumes/${PROJECT_NAME}_config/_data/}

            [ -z $CCONFIG_PATH ] && ! volume-exists ${PROJECT_NAME}_c-config && docker volume create ${PROJECT_NAME}_c-config
            cp $NODE_DIR/avalanche/config.json ${CCONFIG_PATH:-/var/lib/docker/volumes/${PROJECT_NAME}_c-config/_data/}

            [ -z $DATABASE_PATH ] && ! volume-exists ${PROJECT_NAME}_data && docker volume create ${PROJECT_NAME}_data
            ;;
        "optimism")
            [ -z $SCRIPTS_PATH ] && ! volume-exists ${PROJECT_NAME}_scripts && docker volume create ${PROJECT_NAME}_scripts
            cp $NODE_DIR/optimism/scripts/* ${SCRIPTS_PATH:-/var/lib/docker/volumes/${PROJECT_NAME}_scripts/_data/}

            [ -z $CONFIG_PATH ] && ! volume-exists ${PROJECT_NAME}_config && docker volume create ${PROJECT_NAME}_config
            [ -z $SHARED_PATH ] && ! volume-exists ${PROJECT_NAME}_shared && docker volume create ${PROJECT_NAME}_shared
            [ -z $DOWNLOADS_PATH ] && ! volume-exists ${PROJECT_NAME}_downloads && docker volume create ${PROJECT_NAME}_downloads
            [ -z $INFLUXDB_PATH ] && ! volume-exists ${PROJECT_NAME}_influxdb && docker volume create ${PROJECT_NAME}_influxdb
            [ -z $OPGETH_DATABASE_PATH ] && ! volume-exists ${PROJECT_NAME}_opgeth && docker volume create ${PROJECT_NAME}_opgeth
            [ -z $L2GETH_DATABASE_PATH ] && ! volume-exists ${PROJECT_NAME}_l2geth && docker volume create ${PROJECT_NAME}_l2geth
            ;;
        "celo")
            # apt install libusb-1.0-0-dev libudev-dev
            # npm install -g @celo/celocli
            [ -z $DATABASE_PATH ] && ! volume-exists ${PROJECT_NAME}_data && docker volume create ${PROJECT_NAME}_data
            ;;
        "base")
            [ -z $DATABASE_PATH ] && ! volume-exists ${PROJECT_NAME}_data && docker volume create ${PROJECT_NAME}_data
            # tar --use-compress-program=unzstd -xvf archive.tar.zst
            # SNAP_LATEST=$(curl https://mainnet-archive-snapshots.base.org/latest)
            # cd ${DATABASE_PATH:-"/var/lib/docker/volumes/base_data/_data/"} && \
            # wget https://mainnet-archive-snapshots.base.org/$SNAP_LATEST && \
            # tar â€“xvzf $SNAP_LATEST && \
            # rm -rf $SNAP_LATEST
            ;;
        "linea")
            [ -z $CLIENT ] && CLIENT="geth"

            [ -z $DATABASE_PATH ] && ! volume-exists ${PROJECT_NAME}_data && docker volume create ${PROJECT_NAME}_data
            [ -z $DATABASE_CL_PATH ] && ! volume-exists ${PROJECT_NAME}_maru-data && docker volume create ${PROJECT_NAME}_maru-data
            [ -z $CONFIG_PATH ] && mkdir ~/${PROJECT_NAME}-config && CONFIG_PATH=~/${PROJECT_NAME}-config

            [ -d "${CONFIG_PATH}/${CLIENT}" ] || mkdir "${CONFIG_PATH}/${CLIENT}"
            [ -d "${CONFIG_PATH}/maru" ] || mkdir "${CONFIG_PATH}/maru"

            cp $NODEDIR/linea/maru/log4j.xml ${CONFIG_PATH}/maru/log4j.xml
            cp $NODEDIR/linea/maru/maru-genesis.json ${CONFIG_PATH}/maru/maru-genesis.json
            envsubst < $NODEDIR/linea/maru/maru-config.toml > ${CONFIG_PATH}/maru/maru-config.toml
            cp $NODEDIR/linea/${CLIENT}/${CLIENT}-genesis.json ${CONFIG_PATH}/${CLIENT}/${CLIENT}-genesis.json
            cp $NODEDIR/linea/engine-jwt ${CONFIG_PATH}/engine-jwt
            ;;
        "scroll")
            [ -z $DATABASE_PATH ] && ! volume-exists ${PROJECT_NAME}_data && docker volume create ${PROJECT_NAME}_data
            ;;
        *)
            echo "Chain not supported yet!"
            return
            ;;
    esac

    COMPOSE_PROJECT_NAME=${PROJECT_NAME} \
    COMPOSE_FILE=$NODEDIR/$1/$1.yml \
    COMPOSE_PROFILES=${CLIENT} \
    docker compose --env-file $ENV_FILE.env pull

    COMPOSE_PROJECT_NAME=${PROJECT_NAME} \
    COMPOSE_FILE=$NODEDIR/$1/$1.yml \
    COMPOSE_PROFILES=${CLIENT} \
    docker compose --env-file $ENV_FILE.env up -d --remove-orphans --build

    if [ ! -z $MAINNET_LOCAL_NETWORK ]; then
        case $1 in
            "arbitrum-one")
                nets=$(docker container inspect --format '{{range $net,$v := .NetworkSettings.Networks}}{{printf "%s\n" $net}}{{end}}' ${PROJECT_NAME}-nitro)
                [[ ! ${nets[@]} =~ "$MAINNET_LOCAL_NETWORK" ]] && docker network connect $MAINNET_LOCAL_NETWORK ${PROJECT_NAME}-nitro
                nets=$(docker container inspect --format '{{range $net,$v := .NetworkSettings.Networks}}{{printf "%s\n" $net}}{{end}}' ${PROJECT_NAME}-classic)
                [[ ! ${nets[@]} =~ "$MAINNET_LOCAL_NETWORK" ]] && docker network connect $MAINNET_LOCAL_NETWORK ${PROJECT_NAME}-classic
            ;;
            "optimism")
                nets=$(docker container inspect --format '{{range $net,$v := .NetworkSettings.Networks}}{{printf "%s\n" $net}}{{end}}' ${PROJECT_NAME}-op-node)
                [[ ! ${nets[@]} =~ "$MAINNET_LOCAL_NETWORK" ]] && docker network connect $MAINNET_LOCAL_NETWORK ${PROJECT_NAME}-op-node
                nets=$(docker container inspect --format '{{range $net,$v := .NetworkSettings.Networks}}{{printf "%s\n" $net}}{{end}}' ${PROJECT_NAME}-l2geth)
                [[ ! ${nets[@]} =~ "$MAINNET_LOCAL_NETWORK" ]] && docker network connect $MAINNET_LOCAL_NETWORK ${PROJECT_NAME}-l2geth
            ;;
            "base")
                nets=$(docker container inspect --format '{{range $net,$v := .NetworkSettings.Networks}}{{printf "%s\n" $net}}{{end}}' ${PROJECT_NAME}-execution)
                [[ ! ${nets[@]} =~ "$MAINNET_LOCAL_NETWORK" ]] && docker network connect $MAINNET_LOCAL_NETWORK ${PROJECT_NAME}-execution
                nets=$(docker container inspect --format '{{range $net,$v := .NetworkSettings.Networks}}{{printf "%s\n" $net}}{{end}}' ${PROJECT_NAME}-node)
                [[ ! ${nets[@]} =~ "$MAINNET_LOCAL_NETWORK" ]] && docker network connect $MAINNET_LOCAL_NETWORK ${PROJECT_NAME}-node
            ;;
            "matic")
                nets=$(docker container inspect --format '{{range $net,$v := .NetworkSettings.Networks}}{{printf "%s\n" $net}}{{end}}' ${PROJECT_NAME}-heimdalld)
                [[ ! ${nets[@]} =~ "$MAINNET_LOCAL_NETWORK" ]] && docker network connect $MAINNET_LOCAL_NETWORK ${PROJECT_NAME}-heimdalld
            ;;
            *)
                nets=$(docker container inspect --format '{{range $net,$v := .NetworkSettings.Networks}}{{printf "%s\n" $net}}{{end}}' ${PROJECT_NAME})
                [[ ! ${nets[@]} =~ "$MAINNET_LOCAL_NETWORK" ]] && docker network connect $MAINNET_LOCAL_NETWORK ${PROJECT_NAME}
            ;;
        esac 
    fi

    if [ ! -z "$HOST" ]; then
        reverseproxy-check || { echo "Error: reverse proxy not running"; return 1; }

        case $1 in
            "arbitrum-one")
                container=${PROJECT_NAME}-nitro
            ;;
            "optimism")
                container=${PROJECT_NAME}-op-geth
            ;;
            "base")
                container=${PROJECT_NAME}-execution
            ;;
            *)
                container=${PROJECT_NAME}
            ;;
        esac

        nets=$(docker container inspect --format '{{range $net,$v := .NetworkSettings.Networks}}{{printf "%s\n" $net}}{{end}}' $container)
        if [[ ! ${nets[@]} =~ "reverse-proxy" ]]; then
            docker network connect reverse-proxy $container
        fi

        VHOST_PATH=/var/lib/docker/volumes/reverse-proxy_vhost/_data
        [ -f "${VHOST_PATH}/${SUBDOMAIN:-${PROJECT_NAME}}.${HOST}" ] && rm ${VHOST_PATH}/${SUBDOMAIN:-${PROJECT_NAME}}.${HOST}

        if [ ! -z $WHITELIST ]; then
            for (( j=0; j<${#WHITELIST[@]}; j++ )); do
                echo "allow ${WHITELIST[$j]};" >> ${VHOST_PATH}/${SUBDOMAIN:-${PROJECT_NAME}}.${HOST}
            done
            echo "deny all;" >> ${VHOST_PATH}/${SUBDOMAIN:-${PROJECT_NAME}}.${HOST}
        fi
    fi
    # unset HOST SUBDOMAIN WHITELIST DATABASE_PATH MAINNET_LOCAL_NETWORK
    unset PROJECT_NAME
}

node-install() {
    CHAINS=$(whiptail --title "Blockchain Node Setup" --separate-output --checklist "Choose blockchain" 25 52 16 \
        "mainnet" "Ethereum Mainnet" OFF \
        "arbitrum-one" "Arbitrum-One Nitro & Classic" OFF \
        "matic" "Polygon Matic" OFF \
        "gnosis" "Gnosis" OFF \
        "optimism" "Optimism" OFF \
        "avalanche" "Avalanche" OFF \
        "celo" "Celo" OFF \
        "linea" "Linea" OFF \
        "base" "Base" OFF \
        "scroll" "Scroll" OFF \
        "fantom" "Fantom" OFF 3>&1 1>&2 2>&3) || { echo "User exit"; return; }

    if [ -z "$CHAINS" ]; then
        { echo "No option selected"; return; }
    else
        for CHAIN in $CHAINS; do
            ENVFILE=$(whiptail --title "Blockchain Node Setup" --inputbox "Project name for $CHAIN (same as environment file)" 8 78 "$CHAIN" 3>&1 1>&2 2>&3) || return
            node-start $CHAIN $ENVFILE
        done
    fi
}

if [ "${1}" != "--source" ]; then
    basics-install || { echo "Error: could not install basic tools"; exit 1; }
    docker-install || { echo "Error: could not install Docker"; exit 1; }
    nodejs-install || { echo "Error: could not install Node.js"; exit 1; }
    node-install || { echo "Error: could not install blockchains"; exit 1; }

    # export to .bashrc if needed
    if ! grep -q "#node-setup" ~/.bashrc; then
        echo "Modifying .bashrc ..."
        echo -e "\n" >> ~/.bashrc
        echo "#node-setup" >> ~/.bashrc
        echo "export NODE_DIR=$NODEDIR" >> ~/.bashrc
        echo 'source $NODE_DIR/utils/manage' >> ~/.bashrc
        source ~/.bashrc
    fi
fi
