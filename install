#!/bin/bash -i
NODEDIR="$( cd "$( dirname -- $0 )" && pwd )"
. $NODEDIR/utils/docker

basics-install() {
    apt update
    apt -y install ca-certificates curl grep git whiptail
}

docker-install() {
    if ! grep -q "docker" <<< $(find /etc/apt/ -name *.list | xargs cat | grep  ^[[:space:]]*deb | grep -v deb-src); then
        echo "Installing Docker..."
        install -m 0755 -d /etc/apt/keyrings
        curl -fsSL https://download.docker.com/linux/ubuntu/gpg -o /etc/apt/keyrings/docker.asc
        chmod a+r /etc/apt/keyrings/docker.asc
        echo \
            "deb [arch=$(dpkg --print-architecture) signed-by=/etc/apt/keyrings/docker.asc] https://download.docker.com/linux/ubuntu \
            $(. /etc/os-release && echo "$VERSION_CODENAME") stable" | \
            sudo tee /etc/apt/sources.list.d/docker.list > /dev/null
            apt update && apt install docker-ce docker-ce-cli containerd.io docker-buildx-plugin docker-compose-plugin docker-compose
        apt -y install docker-ce docker-ce-cli containerd.io docker-buildx-plugin docker-compose-plugin docker-compose
    fi
}

nodejs-install() {
    if [ ! -d "$HOME/.nvm" ]; then
        echo "Adding NVM"
        apt -y install curl grep
        curl -o- https://raw.githubusercontent.com/nvm-sh/nvm/v0.40.0/install.sh | bash
        source $HOME/.bashrc
        nvm install --lts
        nvm use --lts
    fi

    if [ `npm list -g | grep -c pino-pretty` -eq 0 ]; then
        echo "Adding Pino Pretty"
        npm install -g pino-pretty
    fi
}

reverseproxy-check() {
    if [ "$( docker container inspect -f '{{.State.Running}}' nginx-proxy )" = "false" ] || [ "$( docker container inspect -f '{{.State.Running}}' nginx-ssl )" = "false" ]; then
        return 1
    fi
}

node-start() {
    ENV_FILE="${2:-$1}.env"

    [ -f "$NODEDIR/$1/$1.yml" ] || { echo "Error: $1.yml file not found."; return 1; }
    [ -f "$NODEDIR/$1/${ENV_FILE}" ] || { echo "Error: ${ENV_FILE} file not found"; return 1; }
    source $NODEDIR/$1/${ENV_FILE}

    case $1 in
        "mainnet")
            [ -z $CONFIG_PATH ] && ! volume-exists mainnet_config && docker volume create mainnet_config
            if [ "${ERIGON_TAG:0:2}" = "v2" ]; then
                cp $NODEDIR/mainnet/config-v2.yaml ${CONFIG_PATH:-/var/lib/docker/volumes/mainnet_config/_data}/config.yaml
            else
                cp $NODEDIR/mainnet/config.yaml ${CONFIG_PATH:-/var/lib/docker/volumes/mainnet_config/_data}/config.yaml
            fi

            [ -z $DATABASE_PATH ] && ! volume-exists mainnet_data && docker volume create mainnet_data
            ;;
        "gnosis")
            [ -z $CONFIG_PATH ] && ! volume-exists gnosis_config && docker volume create gnosis_config
            if [ "${ERIGON_TAG:0:2}" = "v2" ]; then
                cp $NODEDIR/gnosis/config-v2.yaml ${CONFIG_PATH:-/var/lib/docker/volumes/gnosis_config/_data}/config.yaml
            else
                cp $NODEDIR/gnosis/config.yaml ${CONFIG_PATH:-/var/lib/docker/volumes/gnosis_config/_data}/config.yaml
            fi

            [ -z $DATABASE_PATH ] && ! volume-exists gnosis_data && docker volume create gnosis_data
            ;;
        "matic")
            [ -z $CONFIG_PATH ] && ! volume-exists matic_config && docker volume create matic_config
            if [ "${ERIGON_TAG:0:2}" = "v2" ]; then
                cp $NODEDIR/matic/config-v2.yaml ${CONFIG_PATH:-/var/lib/docker/volumes/matic_config/_data}/config.yaml
            else
                cp $NODEDIR/matic/config.yaml ${CONFIG_PATH:-/var/lib/docker/volumes/matic_config/_data}/config.yaml
            fi

            [ -z $DATABASE_PATH ] && ! volume-exists matic_data && docker volume create matic_data
            ;;
        "arbitrum-one")
            [ -z $CLASSIC_DATABASE_PATH ] && ! volume-exists arbitrum-one_classic-data && docker volume create arbitrum-one_classic-data
            # curl https://snapshot.arbitrum.foundation/arb1/classic-archive.tar | tar -xv -C  ${CLASSIC_DATABASE_PATH:-"/var/lib/docker/volumes/arbitrum-one_classic-data/_data/"}

            [ -z $NITRO_DATABASE_PATH ] && ! volume-exists arbitrum-one_nitro-data && docker volume create arbitrum-one_nitro-data
            ;;
        "avalanche")
            [ -z $CONFIG_PATH ] && ! volume-exists avalanche_config && docker volume create avalanche_config
            cp $NODE_DIR/avalanche/node.json ${CONFIG_PATH:-/var/lib/docker/volumes/avalanche_config/_data/}

            [ -z $CCONFIG_PATH ] && ! volume-exists avalanche_c-config && docker volume create avalanche_c-config
            cp $NODE_DIR/avalanche/config.json ${CCONFIG_PATH:-/var/lib/docker/volumes/avalanche_c-config/_data/}

            [ -z $DATABASE_PATH ] && ! volume-exists avalanche_data && docker volume create avalanche_data
            ;;
        "optimism")
            [ -z $SCRIPTS_PATH ] && ! volume-exists optimism_scripts && docker volume create optimism_scripts
            cp $NODE_DIR/optimism/scripts/* ${SCRIPTS_PATH:-/var/lib/docker/volumes/optimism_scripts/_data/}

            [ -z $CONFIG_PATH ] && ! volume-exists optimism_config && docker volume create optimism_config
            [ -z $SHARED_PATH ] && ! volume-exists optimism_shared && docker volume create optimism_shared
            [ -z $DOWNLOADS_PATH ] && ! volume-exists optimism_downloads && docker volume create optimism_downloads
            [ -z $INFLUXDB_PATH ] && ! volume-exists optimism_influxdb && docker volume create optimism_influxdb
            [ -z $OPGETH_DATABASE_PATH ] && ! volume-exists optimism_opgeth && docker volume create optimism_opgeth
            [ -z $L2GETH_DATABASE_PATH ] && ! volume-exists optimism_l2geth && docker volume create optimism_l2geth
            ;;
        "celo")
            # apt install libusb-1.0-0-dev libudev-dev
            # npm install -g @celo/celocli
            [ -z $DATABASE_PATH ] && ! volume-exists celo_data && docker volume create celo_data
            ;;
        "base")
            [ -z $DATABASE_PATH ] && ! volume-exists base_data && docker volume create base_data
            # tar --use-compress-program=unzstd -xvf archive.tar.zst
            # SNAP_LATEST=$(curl https://mainnet-archive-snapshots.base.org/latest)
            # cd ${DATABASE_PATH:-"/var/lib/docker/volumes/base_data/_data/"} && \
            # wget https://mainnet-archive-snapshots.base.org/$SNAP_LATEST && \
            # tar â€“xvzf $SNAP_LATEST && \
            # rm -rf $SNAP_LATEST
            ;;
        "linea")
            [ -z $DATABASE_PATH ] && ! volume-exists linea_data && docker volume create linea_data
            ;;
        *)
            echo "Chain not supported yet!"
            return
            ;;
    esac

    COMPOSE_PROJECT_NAME=$1 \
    COMPOSE_FILE=$NODE_DIR/$1/$1.yml \
    docker compose --env-file $NODE_DIR/$1/$1.env pull

    COMPOSE_PROJECT_NAME=$1 \
    COMPOSE_FILE=$NODE_DIR/$1/$1.yml \
    docker compose --env-file $NODE_DIR/$1/$1.env up -d --remove-orphans --build

    if [ ! -z $MAINNET_LOCAL_NETWORK ]; then
        case $1 in
            "arbitrum-one")
                nets=$(docker container inspect --format '{{range $net,$v := .NetworkSettings.Networks}}{{printf "%s\n" $net}}{{end}}' arbitrum-one-nitro)
                [[ ! ${nets[@]} =~ "$MAINNET_LOCAL_NETWORK" ]] && docker network connect $MAINNET_LOCAL_NETWORK arbitrum-one-nitro
                nets=$(docker container inspect --format '{{range $net,$v := .NetworkSettings.Networks}}{{printf "%s\n" $net}}{{end}}' arbitrum-one-classic)
                [[ ! ${nets[@]} =~ "$MAINNET_LOCAL_NETWORK" ]] && docker network connect $MAINNET_LOCAL_NETWORK arbitrum-one-classic
            ;;
            "optimism")
                nets=$(docker container inspect --format '{{range $net,$v := .NetworkSettings.Networks}}{{printf "%s\n" $net}}{{end}}' optimism-op-node)
                [[ ! ${nets[@]} =~ "$MAINNET_LOCAL_NETWORK" ]] && docker network connect $MAINNET_LOCAL_NETWORK optimism-op-node
                nets=$(docker container inspect --format '{{range $net,$v := .NetworkSettings.Networks}}{{printf "%s\n" $net}}{{end}}' optimism-l2geth)
                [[ ! ${nets[@]} =~ "$MAINNET_LOCAL_NETWORK" ]] && docker network connect $MAINNET_LOCAL_NETWORK optimism-l2geth
            ;;
            "base")
                nets=$(docker container inspect --format '{{range $net,$v := .NetworkSettings.Networks}}{{printf "%s\n" $net}}{{end}}' base-execution)
                [[ ! ${nets[@]} =~ "$MAINNET_LOCAL_NETWORK" ]] && docker network connect $MAINNET_LOCAL_NETWORK base-execution
                nets=$(docker container inspect --format '{{range $net,$v := .NetworkSettings.Networks}}{{printf "%s\n" $net}}{{end}}' base-node)
                [[ ! ${nets[@]} =~ "$MAINNET_LOCAL_NETWORK" ]] && docker network connect $MAINNET_LOCAL_NETWORK base-node
            ;;
        esac 
    fi

    if [ ! -z "$HOST" ]; then
        reverseproxy-check || { echo "Error: reverse proxy not running"; return 1; }

        case $1 in
            "arbitrum-one")
                container=$1-nitro
            ;;
            "optimism")
                container=$1-op-geth
            ;;
            "base")
                container=$1-execution
            ;;
            *)
                container=$1
            ;;
        esac

        nets=$(docker container inspect --format '{{range $net,$v := .NetworkSettings.Networks}}{{printf "%s\n" $net}}{{end}}' $container)
        if [[ ! ${nets[@]} =~ "reverse-proxy" ]]; then
            docker network connect reverse-proxy $container
        fi

        VHOST_PATH=/var/lib/docker/volumes/reverse-proxy_vhost/_data
        [ -f "${VHOST_PATH}/${SUBDOMAIN:-$1}.${HOST}" ] && rm ${VHOST_PATH}/${SUBDOMAIN:-$1}.${HOST}

        if [ ! -z $WHITELIST ]; then
            for (( j=0; j<${#WHITELIST[@]}; j++ )); do
                echo "allow ${WHITELIST[$j]};" >> ${VHOST_PATH}/${SUBDOMAIN:-$1}.${HOST}
            done
            echo "deny all;" >> ${VHOST_PATH}/${SUBDOMAIN:-$1}.${HOST}
        fi
    fi
    # unset HOST SUBDOMAIN WHITELIST DATABASE_PATH MAINNET_LOCAL_NETWORK
}

node-install() {
    CHAINS=$(whiptail --title "Blockchain Node Setup" --separate-output --checklist "Choose blockchain" 25 52 16 \
        "mainnet" "Ethereum Mainnet" OFF \
        "arbitrum-one" "Arbitrum-One Nitro & Classic" OFF \
        "matic" "Polygon Matic" OFF \
        "optimism" "Optimism" OFF \
        "avalanche" "Avalanche" OFF \
        "celo" "Celo" OFF \
        "linea" "Linea" OFF \
        "base" "Base" OFF \
        "fantom" "Fantom" OFF 3>&1 1>&2 2>&3) || { echo "User exit"; return; }

    if [ -z "$CHAINS" ]; then
        { echo "No option selected"; return; }
    else
        for CHAIN in $CHAINS; do
            ENVFILE=$(whiptail --title "Blockchain Node Setup" --inputbox "Environment file $CHAIN" 8 78 "$CHAIN" 3>&1 1>&2 2>&3) || return
            node-start $CHAIN $ENVFILE
        done
    fi
}

if [ "${1}" != "--source" ]; then
    basics-install || { echo "Error: could not install basic tools"; exit 1; }
    docker-install || { echo "Error: could not install Docker"; exit 1; }
    nodejs-install || { echo "Error: could not install Node.js"; exit 1; }
    node-install || { echo "Error: could not install blockchains"; exit 1; }

    # export to .bashrc if needed
    if ! grep -q "#node-setup" ~/.bashrc; then
        echo "Modifying .bashrc ..."
        DIR="$( cd "$( dirname -- $0 )" && pwd )"
        echo -e "\n" >> ~/.bashrc
        echo "#node-setup" >> ~/.bashrc
        echo "export NODE_DIR=$DIR" >> ~/.bashrc
        echo 'source $NODE_DIR/utils/manage' >> ~/.bashrc
        source ~/.bashrc
    fi
fi
