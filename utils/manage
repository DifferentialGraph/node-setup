#!/bin/bash

node-start() {
    case $1 in
        "ethereum")
            if [ "$(docker volume ls -f name=ethereum_config | awk '{print $NF}' | grep -E '^'ethereum_config'$')" ]; then
                rm -rf /var/lib/docker/volumes/ethereum_config/_data/config.yaml
            else
                docker volume create ethereum_config
            fi
            cp /root/node-setup/ethereum/config.yaml /var/lib/docker/volumes/ethereum_config/_data/
            ;;
        "gnosis")
            if [ "$(docker volume ls -f name=gnosis_config | awk '{print $NF}' | grep -E '^'gnosis_config'$')" ]; then
                rm -rf /var/lib/docker/volumes/gnosis_config/_data/config.yaml
            else
                docker volume create gnosis_config
            fi
            cp /root/node-setup/gnosis/config.yaml /var/lib/docker/volumes/gnosis_config/_data/
            ;;
        *)
            echo "Chain not supported yet!"
            return
            ;;
    esac

    cd /root/node-setup &&
    if [ -z "$2" ]; then
        COMPOSE_PROJECT_NAME=$1 COMPOSE_FILE=$1/$1.yml docker compose --env-file .env up -d --remove-orphans --build
    else
        COMPOSE_PROJECT_NAME=$1 COMPOSE_FILE=$1/$1.yml docker compose --env-file .env.$2 up -d --remove-orphans --build
    fi
}

node-stop() {
    cd /root/node-setup && COMPOSE_PROJECT_NAME=$1 COMPOSE_FILE=$1/$1.yml docker compose stop
}

node-restart() {
    cd /root/node-setup && COMPOSE_PROJECT_NAME=$1 COMPOSE_FILE=$1/$1.yml docker compose pull
    node-stop $1
    node-start $1
}

node-monitor() {
    # Check if session name exists
    SESSIONEXISTS=$(tmux list-sessions | grep $1)

    # Set up monitoring interface
    if [ "$SESSIONEXISTS" = "" ]
    then
        tmux new-session -d -s $1
        case $1 in
        "arbitrum")    
            tmux rename-window -t 0 'nitro-cli' && tmux send-keys -t 'nitro-cli' "docker exec -it ${1}-nitro /bin/bash" C-m
            tmux new-window -t $1:1 -n 'classic-cli' && tmux send-keys -t 'classic-cli' "docker exec -it ${1}-classic /bin/bash" C-m
            tmux new-window -t $1:2 -n 'nitro-log' && tmux send-keys -t 'nitro-log' "docker logs ${1}-nitro --tail 10 -f | pino-pretty -c -t" C-m
            tmux new-window -t $1:3 -n 'classic-log' && tmux send-keys -t 'classic-log' "docker logs ${1}-classic --tail 10 -f | pino-pretty -c -t" C-m
        ;;
        "avalanche")
            tmux rename-window -t 0 'avalanche-cli' && tmux send-keys -t 'avalanche-cli' "docker exec -it ${1} /bin/bash" C-m
            tmux new-window -t $1:1 -n 'avalanche-log' && tmux send-keys -t 'avalanche-log' "docker logs ${1} --tail 10 -f | pino-pretty -c -t" C-m
        ;;
        "optimism")
            tmux rename-window -t 0 'optimism-dtl' && tmux send-keys -t 'optimism-l2geth' "docker logs ${1}-dtl --tail 10 -f | pino-pretty -c -t" C-m
            tmux new-window -t $1:1 -n 'optimism-l2geth' && tmux send-keys -t 'optimism-l2geth' "docker logs ${1}-l2geth --tail 10 -f | pino-pretty -c -t" C-m
        ;;
        "celo")
            tmux rename-window -t 0 'celo-cli' && tmux send-keys -t 'celo-cli' "celocli node:synced" C-m
            tmux new-window -t $1:1 -n 'celo-log' && tmux send-keys -t 'celo-log' "docker logs ${1} --tail 10 -f | pino-pretty -c -t" C-m
        ;;
        "fantom")
            tmux rename-window -t 0 'fantom-cli' && tmux send-keys -t 'fantom-cli' "docker exec -it fantom /bin/bash" C-m
            tmux new-window -t $1:1 -n 'fantom-log' && tmux send-keys -t 'fantom-log' "docker logs fantom --tail 10 -f | pino-pretty -c -t" C-m
        ;;
        "ethereum")
            tmux rename-window -t 0 'ethereum-log' && tmux send-keys -t 'ethereum-log' "docker logs ethereum --tail 10 -f | pino-pretty -c -t" C-m
            tmux new-window -t $1:1 -n 'lighthouse-log' && tmux send-keys -t 'lighthouse-log' "docker logs ethereum-lighthouse --tail 10 -f | pino-pretty -c -t" C-m
            tmux new-window -t $1:2 -n 'ethereum-container' && tmux send-keys -t 'ethereum-container' "docker exec -it ethereum sh" C-m
            tmux new-window -t $1:3 -n 'lighthouse-container' && tmux send-keys -t 'lighthouse-container' "docker exec -it ethereum-lighthouse sh" C-m
        ;;
        "gnosis")
            tmux rename-window -t 0 'gnosis-log' && tmux send-keys -t 'gnosis-log' "docker logs gnosis --tail 10 -f | pino-pretty -c -t" C-m
            tmux new-window -t $1:1 -n 'lighthouse-log' && tmux send-keys -t 'lighthouse-log' "docker logs gnosis-lighthouse --tail 10 -f | pino-pretty -c -t" C-m
            tmux new-window -t $1:2 -n 'gnosis-container' && tmux send-keys -t 'gnosis-container' "docker exec -it gnosis sh" C-m
            tmux new-window -t $1:3 -n 'lighthouse-container' && tmux send-keys -t 'lighthouse-container' "docker exec -it gnosis-lighthouse sh" C-m
        ;;
        *)
            echo "Chain not supported!"
            return
            # tmux kill-session -t $1
            # exit 1
        ;;
        esac
    fi
    tmux attach-session -t $1:0
}