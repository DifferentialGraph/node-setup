#!/bin/bash

node-start() {
    [ -f "$NODE_DIR/$1/$1.yml" ] || { echo "Error: $1.yml file not found."; return 1; }
    [ -f "$NODE_DIR/$1/$1.env" ] || { echo "Error: $1.env file not found"; return 1; }
    source $NODE_DIR/$1/$1.env
        
    case $1 in
        "mainnet")
            cp $NODE_DIR/mainnet/config.yaml ${CONFIG_PATH:-/var/lib/docker/volumes/mainnet_config/_data/}
            ;;
        "gnosis")
            cp $NODE_DIR/gnosis/config.yaml ${CONFIG_PATH:-/var/lib/docker/volumes/gnosis_config/_data/}
            ;;
        "matic")
            cp $NODE_DIR/matic/config.yaml ${CONFIG_PATH:-/var/lib/docker/volumes/matic_config/_data/}
            ;;
        "arbitrum-one")
            ;;
        "avalanche")
            cp $NODE_DIR/avalanche/node.json ${CONFIG_PATH:-/var/lib/docker/volumes/avalanche_config/_data/}
            cp $NODE_DIR/avalanche/config.json ${CCONFIG_PATH:-/var/lib/docker/volumes/avalanche_c-config/_data/}
            ;;
        "optimism")
            cp $NODE_DIR/optimism/scripts/* ${SCRIPTS_PATH:-/var/lib/docker/volumes/optimism_scripts/_data/}
            ;;
        "celo")
            ;;
        "base")
            ;;
        "linea")
            ;;
        *)
            echo "Chain not supported yet!"
            return
            ;;
    esac

    COMPOSE_PROJECT_NAME=$1 \
    COMPOSE_FILE=$NODE_DIR/$1/$1.yml \
    docker compose --env-file $NODE_DIR/$1/$1.env pull

    COMPOSE_PROJECT_NAME=$1 \
    COMPOSE_FILE=$NODE_DIR/$1/$1.yml \
    docker compose --env-file $NODE_DIR/$1/$1.env up -d --remove-orphans --build

    if [ ! -z $MAINNET_LOCAL_NETWORK ]; then
        case $1 in
            "arbitrum-one")
                nets=$(docker container inspect --format '{{range $net,$v := .NetworkSettings.Networks}}{{printf "%s\n" $net}}{{end}}' arbitrum-one-nitro)
                [[ ! ${nets[@]} =~ "$MAINNET_LOCAL_NETWORK" ]] && docker network connect $MAINNET_LOCAL_NETWORK arbitrum-one-nitro
                nets=$(docker container inspect --format '{{range $net,$v := .NetworkSettings.Networks}}{{printf "%s\n" $net}}{{end}}' arbitrum-one-classic)
                [[ ! ${nets[@]} =~ "$MAINNET_LOCAL_NETWORK" ]] && docker network connect $MAINNET_LOCAL_NETWORK arbitrum-one-classic
            ;;
            "optimism")
                nets=$(docker container inspect --format '{{range $net,$v := .NetworkSettings.Networks}}{{printf "%s\n" $net}}{{end}}' optimism-op-node)
                [[ ! ${nets[@]} =~ "$MAINNET_LOCAL_NETWORK" ]] && docker network connect $MAINNET_LOCAL_NETWORK optimism-op-node
                nets=$(docker container inspect --format '{{range $net,$v := .NetworkSettings.Networks}}{{printf "%s\n" $net}}{{end}}' optimism-l2geth)
                [[ ! ${nets[@]} =~ "$MAINNET_LOCAL_NETWORK" ]] && docker network connect $MAINNET_LOCAL_NETWORK optimism-l2geth
            ;;
            "base")
                nets=$(docker container inspect --format '{{range $net,$v := .NetworkSettings.Networks}}{{printf "%s\n" $net}}{{end}}' base-execution)
                [[ ! ${nets[@]} =~ "$MAINNET_LOCAL_NETWORK" ]] && docker network connect $MAINNET_LOCAL_NETWORK base-execution
                nets=$(docker container inspect --format '{{range $net,$v := .NetworkSettings.Networks}}{{printf "%s\n" $net}}{{end}}' base-node)
                [[ ! ${nets[@]} =~ "$MAINNET_LOCAL_NETWORK" ]] && docker network connect $MAINNET_LOCAL_NETWORK base-node
            ;;
        esac 
    fi

    if [ ! -z "$HOST" ]; then
        case $1 in
            "arbitrum-one")
                container=$1-nitro
            ;;
            "optimism")
                container=$1-op-geth
            ;;
            "base")
                container=$1-execution
            ;;
            *)
                container=$1
            ;;
        esac

        nets=$(docker container inspect --format '{{range $net,$v := .NetworkSettings.Networks}}{{printf "%s\n" $net}}{{end}}' $container)
        if [[ ! ${nets[@]} =~ "reverse-proxy" ]]; then
            docker network connect reverse-proxy $container
        fi

        VHOST_PATH=/var/lib/docker/volumes/reverse-proxy_vhost/_data
        [ -f "${VHOST_PATH}/${SUBDOMAIN:-$1}.${HOST}" ] && rm ${VHOST_PATH}/${SUBDOMAIN:-$1}.${HOST}

        if [ ! -z $WHITELIST ]; then
            for (( j=0; j<${#WHITELIST[@]}; j++ )); do
                echo "allow ${WHITELIST[$j]};" >> ${VHOST_PATH}/${SUBDOMAIN:-$1}.${HOST}
            done
            echo "deny all;" >> ${VHOST_PATH}/${SUBDOMAIN:-$1}.${HOST}
        fi
    fi
}

node-stop() {
    [ -f "$NODE_DIR/$1/$1.yml" ] || { echo "Error: $1.yml file not found."; return 1; }
    [ -f "$NODE_DIR/$1/$1.env" ] || { echo "Error: $1.env file not found"; return 1; }

    COMPOSE_PROJECT_NAME=$1 \
    COMPOSE_FILE=$NODE_DIR/$1/$1.yml \
    docker compose --env-file $NODE_DIR/$1/$1.env stop
}

node-restart() {
    node-stop $1 && node-start $1
}

node-monitor() {
    # Check if session name exists
    SESSIONEXISTS=$(tmux list-sessions | grep $1)

    # Set up monitoring interface
    if [ "$SESSIONEXISTS" = "" ]
    then
        tmux new-session -d -s $1
        case $1 in
        "mainnet")
            [ -z "$( docker ps | grep ${1} )" ] && { echo "Node ${1} not found."; return; }
            tmux rename-window -t 0 'mainnet-log' && tmux send-keys -t 'mainnet-log' "docker logs mainnet --tail 10 -f | pino-pretty -c -t" C-m
            tmux new-window -t $1:1 -n 'mainnet-container' && tmux send-keys -t 'mainnet-container' "docker exec -it mainnet sh" C-m
        ;;
        "gnosis")
            tmux rename-window -t 0 'gnosis-log' && tmux send-keys -t 'gnosis-log' "docker logs gnosis --tail 10 -f | pino-pretty -c -t" C-m
            tmux new-window -t $1:1 -n 'gnosis-container' && tmux send-keys -t 'gnosis-container' "docker exec -it gnosis sh" C-m
        ;;
        "matic")
            tmux rename-window -t 0 'matic-log' && tmux send-keys -t 'matic-log' "docker logs matic --tail 10 -f | pino-pretty -c -t" C-m
            tmux new-window -t $1:1 -n 'matic-container' && tmux send-keys -t 'matic-container' "docker exec -it matic sh" C-m
        ;;
        "arbitrum-one")    
            tmux rename-window -t 0 'nitro-log' && tmux send-keys -t 'nitro-log' "docker logs ${1}-nitro --tail 10 -f | pino-pretty -c -t" C-m
            tmux new-window -t $1:1 -n 'classic-log' && tmux send-keys -t 'classic-log' "docker logs ${1}-classic --tail 10 -f | pino-pretty -c -t" C-m
            tmux new-window -t $1:2 -n 'nitro-cli' && tmux send-keys -t 'nitro-cli' "docker exec -it ${1}-nitro /bin/bash" C-m
            tmux new-window -t $1:3 -n 'classic-cli' && tmux send-keys -t 'classic-cli' "docker exec -it ${1}-classic /bin/bash" C-m
        ;;
        "avalanche")
            tmux rename-window -t 0 'avalanche-log' && tmux send-keys -t 'avalanche-log' "docker logs ${1} --tail 10 -f | pino-pretty -c -t" C-m
            tmux new-window -t $1:1 -n 'avalanche-cli' && tmux send-keys -t 'avalanche-cli' "docker exec -it ${1} /bin/bash" C-m
        ;;
        "optimism")
            tmux rename-window -t 0 'op-geth' && tmux send-keys -t 'op-geth' "docker logs ${1}-op-geth --tail 10 -f | pino-pretty -c -t" C-m
            tmux new-window -t $1:1 -n 'op-node' && tmux send-keys -t 'op-node' "docker logs ${1}-op-node --tail 10 -f | pino-pretty -c -t" C-m
            tmux new-window -t $1:2 -n 'bedrock-init' && tmux send-keys -t 'bedrock-init' "docker logs ${1}-bedrock-init --tail 10 -f | pino-pretty -c -t" C-m
            tmux new-window -t $1:3 -n 'l2geth' && tmux send-keys -t 'l2geth' "docker logs ${1}-l2geth --tail 10 -f | pino-pretty -c -t" C-m
        ;;
        "celo")
            tmux rename-window -t 0 'celo-log' && tmux send-keys -t 'celo-log' "docker logs celo --tail 10 -f | pino-pretty -c -t" C-m
            tmux new-window -t $1:1 -n 'celo-cli' && tmux send-keys -t 'celo-cli' "docker exec -it celo /bin/bash" C-m
        ;;
        "fantom")
            tmux rename-window -t 0 'fantom-cli' && tmux send-keys -t 'fantom-cli' "docker exec -it fantom /bin/bash" C-m
            tmux new-window -t $1:1 -n 'fantom-log' && tmux send-keys -t 'fantom-log' "docker logs fantom --tail 10 -f | pino-pretty -c -t" C-m
        ;;
        *)
            echo "Chain not supported!"
            return
        ;;
        esac
    fi
    tmux attach-session -t $1:0
}